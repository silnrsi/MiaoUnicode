#include "stddef.gdh"

ExtraAscent  = 250m;
ExtraDescent = 100m;

#define OPT_FINA_SEQ [[clsFina? clsFina]? clsFina]?

table(glyph) {AttributeOverride = true};

/* initials */
  gPa = postscript("miao_pa");  // U+16F00·𖼀
  gBa = postscript("miao_ba");  // U+16F01·𖼁
  gPaYi = postscript("miao_yi_pa");  // U+16F02·𖼂
  gPla = postscript("miao_pla");  // U+16F03·𖼃
  gMa = postscript("miao_ma.ywq");  // U+16F04·𖼄	
  gMha = postscript("miao_mha");  // U+16F05·𖼅
  gMaArch = postscript("miao_arch_ma");  // U+16F06·𖼆
  gFa = postscript("miao_fa");  // U+16F07·𖼇
  gVa = postscript("miao_va");  // U+16F08·𖼈
  gVfa = postscript("miao_vfa");  // U+16F09·𖼉
  gTa = postscript("miao_ta");  // U+16F0A·𖼊
  gDa = postscript("miao_da");  // U+16F0B·𖼋
  gTtaYi = postscript("miao_yi_tta");  // U+16F0C·𖼌
  gTaYi = postscript("miao_yi_ta");  // U+16F0D·𖼍
  gTta = postscript("miao_tta");  // U+16F0E·𖼎
  gDda = postscript("miao_dda");  // U+16F0F·𖼏
  gNa = postscript("miao_na.ywq");  // U+16F10·𖼐
  gNha = postscript("miao_nha");  // U+16F11·𖼑
  gNnaYi = postscript("miao_yi_nna");  // U+16F12·𖼒
  gNaArch = postscript("miao_arch_na");  // U+16F13·𖼓
  gNna = postscript("miao_nna");  // U+16F14·𖼔
  gNnha = postscript("miao_nnha");  // U+16F15·𖼕
  gLa = postscript("miao_la");  // U+16F16·𖼖
  gLya = postscript("miao_lya");  // U+16F17·𖼗
  gLha = postscript("miao_lha");  // U+16F18·𖼘
  gLhya = postscript("miao_lhya");  // U+16F19·𖼙
  gTlha = postscript("miao_tlha");  // U+16F1A·𖼚
  gDlha = postscript("miao_dlha");  // U+16F1B·𖼛
  gTlhya = postscript("miao_tlhya");  // U+16F1C·𖼜
  gDlhya = postscript("miao_dlhya");  // U+16F1D·𖼝
  gKa = postscript("miao_ka");  // U+16F1E·𖼞
  gGa = postscript("miao_ga");  // U+16F1F·𖼟
  gKaYi = postscript("miao_yi_ka");  // U+16F20·𖼠
  gQa = postscript("miao_qa");  // U+16F21·𖼡
  gQga = postscript("miao_qga");  // U+16F22·𖼢
  gNga = postscript("miao_nga");  // U+16F23·𖼣
  gNgha = postscript("miao_ngha");  // U+16F24·𖼤
  gNgaArch = postscript("miao_arch_nga");  // U+16F25·𖼥
  gHa = postscript("miao_ha");  // U+16F26·𖼦
  gXa = postscript("miao_xa");  // U+16F27·𖼧
  gGha = postscript("miao_gha");  // U+16F28·𖼨
  gGhha = postscript("miao_ghha");  // U+16F29·𖼩
  gTssa = postscript("miao_tssa");  // U+16F2A·𖼪
  gDzza = postscript("miao_dzza");  // U+16F2B·𖼫
  gNya = postscript("miao_nya");  // U+16F2C·𖼬
  gNyha = postscript("miao_nyha");  // U+16F2D·𖼭
  gTsha = postscript("miao_tsha");  // U+16F2E·𖼮
  gDzha = postscript("miao_dzha.ywq");  // U+16F2F·𖼯
  gTshaYi = postscript("miao_yi_tsha");  // U+16F30·𖼰
  gDzhaYi = postscript("miao_yi_dzha");  // U+16F31·𖼱
  gTshaRef = postscript("miao_ref_tsha");  // U+16F32·𖼲
  gSha = postscript("miao_sha");  // U+16F33·𖼳
  gSsa = postscript("miao_ssa");  // U+16F34·𖼴
  gZha = postscript("miao_zha.ywq");  // U+16F35·𖼵
  gZsha = postscript("miao_zsha");  // U+16F36·𖼶
  gTsa = postscript("miao_tsa");  // U+16F37·𖼷
  gDza = postscript("miao_dza");  // U+16F38·𖼸
  gTsaYi = postscript("miao_yi_tsa");  // U+16F39·𖼹
  gSa = postscript("miao_sa");  // U+16F3A·𖼺
  gZa = postscript("miao_za");  // U+16F3B·𖼻
  gZsa = postscript("miao_zsa");  // U+16F3C·𖼼
  gZza = postscript("miao_zza");  // U+16F3D·𖼽
  gZzsa = postscript("miao_zzsa");  // U+16F3E·𖼾
  gZzaArch = postscript("miao_arch_zza");  // U+16F3F·𖼿
  gZzya = postscript("miao_zzya");  // U+16F40·𖽀
  gZzsya = postscript("miao_zzsya");  // U+16F41·𖽁
  gWa = postscript("miao_wa");  // U+16F42·𖽂
  gAh = postscript("miao_ah");  // U+16F43·𖽃
  gHha = postscript("miao_hha");  // U+16F44·𖽄

/* stylistic alternates */
  gShaSalt = postscript("miao_sha.salt");  // U+16F33 Stylistic·𖼳
  gSsaSalt = postscript("miao_ssa.salt");  // U+16F34 Stylistic·𖼴

/* Chuxiong 'wart' variants */
/* NB unnecessary to include attachment points for tone positions as tones shown by letter not position in Chuxiong, but here anyway */
  gBaChux = postscript("miao_ba.chux");  // U+16F01 Chuxiong·𖼁
  gMhaChux = postscript("miao_mha.chux");  // U+16F05 Chuxiong·𖼅
  gVfaChux = postscript("miao_vfa.chux");  // U+16F09 Chuxiong·𖼉
  gDaChux = postscript("miao_da.chux");  // U+16F0B Chuxiong·𖼋
  gDdaChux = postscript("miao_dda.chux");  // U+16F0F Chuxiong·𖼏
  gNhaChux = postscript("miao_nha.chux");  // U+16F11 Chuxiong·𖼑
  gNnhaChux = postscript("miao_nnha.chux");  // U+16F15 Chuxiong·𖼕
  gLyaChux = postscript("miao_lya.chux");  // U+16F17 Chuxiong·𖼗
  gLhyaChux = postscript("miao_lhya.chux");  // U+16F19 Chuxiong·𖼙
  gDlhaChux = postscript("miao_dlha.chux");  // U+16F1B Chuxiong·𖼛
  gDlhyaChux = postscript("miao_dlhya.chux");  // U+16F1D Chuxiong·𖼝
  gGaChux = postscript("miao_ga.chux");  // U+16F1F Chuxiong·𖼟
  gQgaChux = postscript("miao_qga.chux");  // U+16F22 Chuxiong·𖼢
  gNghaChux = postscript("miao_ngha.chux");  // U+16F24 Chuxiong·𖼤
  gGhhaChux = postscript("miao_ghha.chux");  // U+16F29 Chuxiong·𖼩
  gDzzaChux = postscript("miao_dzza.chux");  // U+16F2B Chuxiong·𖼫
  gNyhaChux = postscript("miao_nyha.chux");  // U+16F2D Chuxiong·𖼭
  gDzhaChux = postscript("miao_dzha.chux");  // U+16F2F Chuxiong·𖼯
  gZshaChux = postscript("miao_zsha.chux");  // U+16F36 Chuxiong·𖼶
  gDzaChux = postscript("miao_dza.chux");  // U+16F38 Chuxiong·𖼸
  gZsaChux = postscript("miao_zsa.chux");  // U+16F3C Chuxiong·𖼼
  gZzsaChux = postscript("miao_zzsa.chux");  // U+16F3E Chuxiong·𖼾
  gZzsyaChux = postscript("miao_zzsya.chux");  // U+16F41 Chuxiong·𖽁
  gHhaChux = postscript("miao_hha.chux");  // U+16F44 Chuxiong·𖽄

/* main 69 initials in unicode block */
  clsInitStd = (
gPa, gBa, gPaYi, gPla,
gMa, gMha, gMaArch,
gFa, gVa, gVfa,
gTa, gDa, gTtaYi,
gTaYi, gTta, gDda,
gNa, gNha, gNnaYi,
gNaArch, gNna, gNnha,
gLa, gLya, gLha, gLhya,
gTlha, gDlha, gTlhya, gDlhya,
gKa, gGa, gKaYi, gQa, gQga,
gNga, gNgha, gNgaArch,
gHa, gXa, gGha, gGhha,
gTssa, gDzza, gNya,
gNyha, gTsha,
gDzha, gTshaYi, gDzhaYi, gTshaRef,
gSha, gSsa, gZha, gZsha,
gTsa, gDza, gTsaYi,
gSa, gZa, gZsa,
gZza, gZzsa, gZzaArch,
gZzya, gZzsya, gWa, gAh, gHha
  );

/* stylistic alternates class */
  clsInitSaltStd = (gSha,     gSsa);
  clsInitSalt    = (gShaSalt, gSsaSalt);

/* standard 'wart' class */
  clsWartStd = (gBa, gMha, gVfa,
                gDa, gDda, gNha, gNnha,
                gLya, gLhya, gDlha, gDlhya,
                gGa, gQga, gNgha,
                gGhha, gDzza, gNyha,
                gDzha, gZsha, gDza, gZsa,
                gZzsa, gZzsya, gHha);

/* Chuxiong 'wart' class */
  clsWartChux = (gBaChux, gMhaChux, gVfaChux,
                 gDaChux, gDdaChux, gNhaChux, gNnhaChux,
                 gLyaChux, gLhyaChux, gDlhaChux, gDlhyaChux,
                 gGaChux, gQgaChux, gNghaChux,
                 gGhhaChux, gDzzaChux, gNyhaChux,
                 gDzhaChux, gZshaChux, gDzaChux, gZsaChux,
                 gZzsaChux, gZzsyaChux, gHhaChux);

/* digraphs of initials with aspiration mark on the left (ma and na based letters) */
/* simpler than using attachment points in order to guard left space, so that asp mark doesn't hang too far over */
  gMaAspL = postscript("miao_ma.aspl");  // U+16F04·𖼄
  gMhaAspL = postscript("miao_mha.aspl");  // U+16F05·𖼅
  gMaArchAspL = postscript("miao_arch_ma.aspl")  // U+16F06·𖼆
    { aboveNormS = point(bb.width/2+10m, bb.top+90m-44m) ;
      aboveTopS  = point(bb.width/2+10m, bb.top+320m-44m) ;
      aboveDescS = point(bb.width/2+10m, bb.top+340m-44m) ;
      belowNormS = point(bb.width/2+10m, bb.bottom-320m) ;
      belowTopS  = point(bb.width/2+10m, bb.bottom-90m) ;
      belowDescS = point(bb.width/2+10m, bb.bottom-70m) } ;
  gNaAspL = postscript("miao_na.aspl");  // U+16F10·𖼐
  gNhaAspL = postscript("miao_nha.aspl");  // U+16F11·𖼑
  gNnaYiAspL = postscript("miao_yi_nna.aspl");  // U+16F12·𖼒
  gNaArchAspL = postscript("miao_arch_na.aspl")  // U+16F13·𖼓
    { aboveNormS = point(bb.width/2+50m, bb.top+90m-44m) ;
      aboveTopS  = point(bb.width/2+50m, bb.top+320m-44m) ;
      aboveDescS = point(bb.width/2+50m, bb.top+340m-44m) ;
      belowNormS = point(bb.width/2+50m, bb.bottom-320m) ;
      belowTopS  = point(bb.width/2+50m, bb.bottom-90m) ;
      belowDescS = point(bb.width/2+50m, bb.bottom-70m) } ;
  gNnaAspL = postscript("miao_nna.aspl");  // U+16F14·𖼔
  gNnhaAspL = postscript("miao_nnha.aspl");  // U+16F15·𖼕
  gNgaAspL = postscript("miao_nga.aspl");  // U+16F23·𖼣
  gNghaAspL = postscript("miao_ngha.aspl");  // U+16F24·𖼤
  gNgaArchAspL = postscript("miao_arch_nga.aspl")  // U+16F25·𖼥
    { aboveNormS = point(bb.width/2+60m, bb.top+90m-44m) ;
      aboveTopS  = point(bb.width/2+60m, bb.top+320m-44m) ;
      aboveDescS = point(bb.width/2+60m, bb.top+340m-44m) ;
      belowNormS = point(bb.width/2+60m, bb.bottom-320m) ;
      belowTopS  = point(bb.width/2+60m, bb.bottom-90m) ;
      belowDescS = point(bb.width/2+60m, bb.bottom-70m) } ;
  gMhaChuxAspL = postscript("miao_mha.chux.aspl");  // U+16F05 Chuxiong·𖼅
  gNhaChuxAspL = postscript("miao_nha.chux.aspl");  // U+16F11 Chuxiong·𖼑
  gNnhaChuxAspL = postscript("miao_nnha.chux.aspl");  // U+16F15 Chuxiong·𖼕
  gNghaChuxAspL = postscript("miao_ngha.chux.aspl");  // U+16F24 Chuxiong·𖼤

  clsInitAspL = (gMaAspL, gMhaAspL, gMaArchAspL,
                 gNaAspL, gNhaAspL, gNnaYiAspL,
                 gNaArchAspL, gNnaAspL, gNnhaAspL,
                 gNgaAspL, gNghaAspL, gNgaArchAspL,
                 gMhaChuxAspL,
                 gNhaChuxAspL, gNnhaChuxAspL,
                 gNghaChuxAspL);

  clsInitAspLStd = (gMa, gMha, gMaArch,
                    gNa, gNha, gNnaYi,
                    gNaArch, gNna, gNnha,
                    gNga, gNgha, gNgaArch,
                    gMhaChux,
                    gNhaChux, gNnhaChux,
                    gNghaChux);

  clsInit = (clsInitStd, clsInitSalt, clsWartChux, clsInitAspL);

/* initials with aspiration mark on the right (default) */
  clsInitAspR = (
gPa, gBa, gPaYi, gPla,
gFa, gVa, gVfa,
gTa, gDa, gTtaYi,
gTaYi, gTta, gDda,
gLa, gLya, gLha, gLhya,
gTlha, gDlha, gTlhya, gDlhya,
gKa, gGa, gKaYi, gQa, gQga,
gHa, gXa, gGha, gGhha,
gTssa, gDzza, gNya,
gNyha, gTsha,
gDzha, gTshaYi, gDzhaYi, gTshaRef,
gSha, gSsa, gZha, gZsha,
gTsa, gDza, gTsaYi,
gSa, gZa, gZsa,
gZza, gZzsa, gZzaArch,
gZzya, gZzsya, gWa, gAh, gHha,
gShaSalt, gSsaSalt,
gBaChux,   gVfaChux,
gDaChux, gDdaChux,
gLyaChux, gLhyaChux, gDlhaChux, gDlhyaChux,
gGaChux, gQgaChux,
gGhhaChux, gDzzaChux, gNyhaChux,
gDzhaChux, gZshaChux, gDzaChux, gZsaChux,
gZzsaChux, gZzsyaChux, gHhaChux
  );

/* high kerning for A shape letters */
  clsInitHiMajKern = (gLa, gLya, gLha, gLhya,
                      gTlha, gDlha, gTlhya, gDlhya,
                      gTssa, gDzza, gZza, gZzsa, gZzaArch,
                      gZzya, gZzsya)
    { aspHiS = point(bb.right-60m, bb.bottom+700m) } ;
  clsInitHiMinKern = (gPaYi, gMaArch, gMaArchAspL)
    { aspHiS = point(bb.right-10m, bb.bottom+700m) } ;
  clsInitHiNoKern = (gPa, gBa, gPla, gMa, gMha, gFa,
                     gVa, gVfa, gTa, gDa,
                     gTtaYi, gTaYi, gTta, gDda,
                     gNa, gNha, gNnaYi, gNaArch, gNna, gNnha,
                     gKa, gGa, gKaYi, gQa, gQga, gNga, gNgha,
                     gNgaArch, gHa, gXa, gGha, gGhha,
                     gNya, gNyha, gTsha, gDzha, gTshaYi, gDzhaYi,
                     gTshaRef, gSha, gSsa, gZha, gZsha,
                     gTsa, gDza, gTsaYi, gSa, gZa, gZsa,
                     gWa, gAh, gHha,
                     clsWartChux, clsInitSalt
                     gMaAspL, gMhaAspL,
                     gNaAspL, gNhaAspL
                     gNaAspL, gNhaAspL, gNnaYiAspL,
                     gNaArchAspL, gNnaAspL, gNnhaAspL,
                     gNgaAspL, gNghaAspL, gNgaArchAspL,
                     gMhaChuxAspL,
                     gNhaChuxAspL, gNnhaChuxAspL,
                     gNghaChuxAspL)
    { aspHiS = point(bb.right+90m, bb.bottom+700m) } ;

/* mid kerning for C shape letters */
  clsInitMidMajKern = (gFa, gTa, gDa, gTaYi, gTta, gDda,
                       gNa, gNha, gNnaYi,
                       gLa, gLya, gQa, gQga,
                       gTssa, gDzza, gNya, gDzha, gTsha, gTshaRef
                       gBaChux, gMhaChux, gVfaChux,
                       gDaChux, gDdaChux, gNhaChux, gNnhaChux,
                       gLyaChux,
                       gGaChux, gQgaChux, gNghaChux,
                       gGhhaChux, gDzzaChux, gNyhaChux,
                       gDzhaChux, gZshaChux,   gZsaChux,
                       gHhaChux,
                       gNaAspL, gNhaAspL, gNnaYiAspL,
                       gMhaChuxAspL,
                       gNhaChuxAspL, gNnhaChuxAspL,
                       gNghaChuxAspL);
  clsInitMidMinKern = (gPaYi, gVa, gVfa
                       gTlha, gDlha, gTlhya, gDlhya,
                       gKaYi, gNyha, gTsha,
                       gZza, gZzsa, gZzya, gZzsya,
                       gAh, gHha,
                       gDlhaChux, gDlhyaChux, gZzsaChux, gZzsyaChux);
  clsInitMidNoKern  = (gPa, gBa, gPla, gMa, gMha, gMaArch,
                       gTtaYi, gNaArch, gNna, gNnha,
                       gLha, gLhya, gKa, gGa, 
                       gNga, gNgha, gNgaArch,
                       gHa, gXa, gGha, gGhha, gDzhaYi,
                       gSha, gSsa, gZha, gZsha,
                       gTsa, gDza, gTsaYi,
                       gSa, gZa, gZsa, gZzaArch, gWa
                       clsInitSalt, gLhyaChux, gDzaChux
                       gMaAspL, gMhaAspL, gMaArchAspL,
                       gNaArchAspL, gNnaAspL, gNnhaAspL,
                       gNgaAspL, gNghaAspL, gNgaArchAspL);

/* low kerning for V shape letters */
  clsInitLoChuxKern = (gVfaChux, gDaChux, gQgaChux,
                       gHhaChux)
    { aspLoS = point(bb.right-250m, bb.bottom-50m) } ;
  clsInitLoMajKern = (gFa, gVa, gVfa,
                      gTa, gDa, gTtaYi,
                      gQa, gQga,
                      gAh, gHha,
                      gBaChux, gDdaChux,
                      gNhaChux, gNnhaChux, gGaChux, gNghaChux,
                      gGhhaChux, gNyhaChux, gDzhaChux,
                      gDzaChux, gZshaChux, gZsaChux
                      gNhaChuxAspL, gNnhaChuxAspL,
                      gNghaChuxAspL)
    { aspLoS = point(bb.right-50m, bb.bottom-50m) } ;
  clsInitLoMinKern = (gTaYi, gKaYi,
                      gTsa, gDza, gTsaYi,
                      gSha, gSsa,
                      gMhaChux, gMhaChuxAspL)
    { aspLoS = point(bb.right+10m, bb.bottom-50m) } ;
  clsInitLoNoKern = (gPa, gBa, gPaYi, gPla, gMa, gMha, gMaArch,
                     gTta, gDda,
                     gNa, gNha, gNnaYi, gNaArch, gNna, gNnha,
                     gLa, gLya, gLha, gLhya,
                     gTlha, gDlha, gTlhya, gDlhya,
                     gKa, gGa,
                     gNga, gNgha, gNgaArch,
                     gHa, gXa, gGha, gGhha,
                     gTssa, gDzza, gNya, gNyha, gTsha,
                     gDzha, gTshaYi, gDzhaYi, gTshaRef,
                     gZha, gZsha, gSa, gZa, gZsa,
                     gZza, gZzsa, gZzaArch, gZzya, gZzsya, gWa,
                     clsInitSalt,
                     gLyaChux, gLhyaChux, gDlhaChux, gDlhyaChux,
                     gDzzaChux, gZzsaChux, gZzsyaChux
                     gMaAspL, gMhaAspL, gMaArchAspL,
                     gNaAspL, gNhaAspL, gNnaYiAspL,
                     gNaArchAspL, gNnaAspL, gNnhaAspL,
                     gNgaAspL, gNghaAspL, gNgaArchAspL)
    { aspLoS = point(bb.right+90m, bb.bottom-50m) } ;

/* S(tationary) attachment points for above and below position */
  clsInitAlignC  = (gVa, gVfa, gTssa, gDzza,
                    gNyha, gTsha, gZha, gZsha,
                    gTshaRef, gTsa, gDza, gTsaYi,
                    gSa, gZa, gZsa, gZza, gZzsa)
    { aboveNormS = point(bb.width/2, bb.top+90m) ;
      aboveTopS  = point(bb.width/2, bb.top+320m) ;
      aboveDescS = point(bb.width/2, bb.top+340m) ;
      belowNormS = point(bb.width/2, bb.bottom-320m) ;
      belowTopS  = point(bb.width/2, bb.bottom-90m) ;
      belowDescS = point(bb.width/2, bb.bottom-70m) } ;

  clsInitAlignL1 = (gLa, gLya, gLhya)
    { aboveNormS = point(bb.width/2-50m, bb.top+90m) ;
      aboveTopS  = point(bb.width/2-50m, bb.top+320m) ;
      aboveDescS = point(bb.width/2-50m, bb.top+340m) ;
      belowNormS = point(bb.width/2-50m, bb.bottom-320m) ;
      belowTopS  = point(bb.width/2-50m, bb.bottom-90m) ;
      belowDescS = point(bb.width/2-50m, bb.bottom-70m) } ;

  clsInitAlignL2 = (gMa, gMha, gLha
                    gBaChux, gMhaChux, gVfaChux,
                    gDaChux, gDdaChux, gNhaChux, gNnhaChux,
                    gLyaChux, gLhyaChux, gDlhaChux, gDlhyaChux,
                    gGaChux, gQgaChux, gNghaChux,
                    gGhhaChux, gDzzaChux, gNyhaChux,
                    gDzhaChux, gZshaChux, gDzaChux, gZsaChux,
                    gZzsaChux, gZzsyaChux, gHhaChux)
    { aboveNormS = point(bb.width/2-30m, bb.top+90m) ;
      aboveTopS  = point(bb.width/2-30m, bb.top+320m) ;
      aboveDescS = point(bb.width/2-30m, bb.top+340m) ;
      belowNormS = point(bb.width/2-30m, bb.bottom-320m) ;
      belowTopS  = point(bb.width/2-30m, bb.bottom-90m) ;
      belowDescS = point(bb.width/2-30m, bb.bottom-70m) } ;

  clsInitAlignR1 = (gNa, gNha, gNnaYi,
                    gDzha, gTshaYi, gDzhaYi)
    { aboveNormS = point(bb.width/2+100m, bb.top+90m) ;
      aboveTopS  = point(bb.width/2+100m, bb.top+320m) ;
      aboveDescS = point(bb.width/2+100m, bb.top+340m) ;
      belowNormS = point(bb.width/2+100m, bb.bottom-320m) ;
      belowTopS  = point(bb.width/2+100m, bb.bottom-90m) ;
      belowDescS = point(bb.width/2+100m, bb.bottom-70m) } ;

  clsInitAlignR2 = (gPa, gBa, gPaYi, gPla,
                    gKa, gGa, gKaYi, gTta)
    { aboveNormS = point(bb.width/2+70m, bb.top+90m) ;
      aboveTopS  = point(bb.width/2+70m, bb.top+320m) ;
      aboveDescS = point(bb.width/2+70m, bb.top+340m) ;
      belowNormS = point(bb.width/2+70m, bb.bottom-320m) ;
      belowTopS  = point(bb.width/2+70m, bb.bottom-90m) ;
      belowDescS = point(bb.width/2+70m, bb.bottom-70m) } ;

  clsInitAlignR3 = (gMaArch, gFa, gNha,
                    gNna, gHa, gXa,
                    gNya, gSha, gShaSalt, gZzsya)
    { aboveNormS = point(bb.width/2+50m, bb.top+90m) ;
      aboveTopS  = point(bb.width/2+50m, bb.top+320m) ;
      aboveDescS = point(bb.width/2+50m, bb.top+340m) ;
      belowNormS = point(bb.width/2+50m, bb.bottom-320m) ;
      belowTopS  = point(bb.width/2+50m, bb.bottom-90m) ;
      belowDescS = point(bb.width/2+50m, bb.bottom-70m) } ;

  clsInitAlignR4 = (gTa, gDa, gTtaYi, gTaYi, gTta, gDda,
                    gNaArch, gNnha,
                    gTlha, gDlha, gTlhya, gDlhya,
                    gQa, gQga, gNga, gNgha, gNgaArch,
                    gGha, gGhha, gSsa, gSsaSalt,
                    gZzaArch, gZzya, gWa, gAh, gHha)
    { aboveNormS = point(bb.width/2+30m, bb.top+90m) ;
      aboveTopS  = point(bb.width/2+30m, bb.top+320m) ;
      aboveDescS = point(bb.width/2+30m, bb.top+340m) ;
      belowNormS = point(bb.width/2+30m, bb.bottom-320m) ;
      belowTopS  = point(bb.width/2+30m, bb.bottom-90m) ;
      belowDescS = point(bb.width/2+30m, bb.bottom-70m) } ;

  clsInitAlignAspL1 = (gMaAspL, gMhaAspL) // merge with R3?
    { aboveNormS = point(bb.width/2+50m, bb.top+90m-44m) ;
      aboveTopS  = point(bb.width/2+50m, bb.top+320m-44m) ;
      aboveDescS = point(bb.width/2+50m, bb.top+340m-44m) ;
      belowNormS = point(bb.width/2+50m, bb.bottom-320m) ;
      belowTopS  = point(bb.width/2+50m, bb.bottom-90m) ;
      belowDescS = point(bb.width/2+50m, bb.bottom-70m) } ;

  clsInitAlignAspL2 = (gNaAspL, gNnaAspL, gNgaAspL)
    { aboveNormS = point(bb.width/2+80m, bb.top+90m-44m) ;
      aboveTopS  = point(bb.width/2+80m, bb.top+320m-44m) ;
      aboveDescS = point(bb.width/2+80m, bb.top+340m-44m) ;
      belowNormS = point(bb.width/2+80m, bb.bottom-320m) ;
      belowTopS  = point(bb.width/2+80m, bb.bottom-90m) ;
      belowDescS = point(bb.width/2+80m, bb.bottom-70m) } ;

  clsInitAlignAspL3 = (gNhaAspL, gNnaYiAspL, gNnhaAspL, gNghaAspL)
    { aboveNormS = point(bb.width/2+115m, bb.top+90m-44m) ;
      aboveTopS  = point(bb.width/2+115m, bb.top+320m-44m) ;
      aboveDescS = point(bb.width/2+115m, bb.top+340m-44m) ;
      belowNormS = point(bb.width/2+115m, bb.bottom-320m) ;
      belowTopS  = point(bb.width/2+115m, bb.bottom-90m) ;
      belowDescS = point(bb.width/2+115m, bb.bottom-70m) } ;

  clsInitAlignAspL4 = (gMhaChuxAspL,
                       gNhaChuxAspL, gNnhaChuxAspL,
                       gNghaChuxAspL)
    { aboveNormS = point(bb.width/2+10m, bb.top+90m-44m) ;
      aboveTopS  = point(bb.width/2+10m, bb.top+320m-44m) ;
      aboveDescS = point(bb.width/2+10m, bb.top+340m-44m) ;
      belowNormS = point(bb.width/2+10m, bb.bottom-320m) ;
      belowTopS  = point(bb.width/2+10m, bb.bottom-90m) ;
      belowDescS = point(bb.width/2+10m, bb.bottom-70m) } ;

/* modifiers */
  gNasal = postscript("miao_nasal");  // U+16F50·𖽐
  gAsp = postscript("miao_asp");  // U+16F51·	𖽑
  gVoiRef = postscript("miao_ref_voice");  // U+16F52·	𖽒
  gAspRef = postscript("miao_ref_asp");  // U+16F53·	𖽓

  clsAsp = (gAsp, gVoiRef, gAspRef);
  clsAspHi = (gAsp, gVoiRef)
    { aspHiM  = point(bb.left,  bb.top) } ;
  clsAspLo = (gAspRef)
    { aspLoM = point(bb.left, bb.bottom) } ;

/* finals */
  gA = postscript("miao_a");  // U+16F54·	𖽔
    /* gA height 59m compared to standard height 219m */
  gAa = postscript("miao_aa");  // U+16F55·	𖽕
  gAhh = postscript("miao_ahh");  // U+16F56·	𖽖
  gAn = postscript("miao_an");  // U+16F57·	𖽗
  gAng = postscript("miao_ang");  // U+16F58·	𖽘
  gO = postscript("miao_o");  // U+16F59·	𖽙
  gOo = postscript("miao_oo");  // U+16F5A·	𖽚
  gWo = postscript("miao_wo");  // U+16F5B·	𖽛
  gW = postscript("miao_w");  // U+16F5C·	𖽜
  gE = postscript("miao_e");  // U+16F5D·	𖽝
  gEn = postscript("miao_en");  // U+16F5E·	𖽞
  gEng = postscript("miao_eng");  // U+16F5F·	𖽟
  gOey = postscript("miao_oey");  // U+16F60·	𖽠
  gI = postscript("miao_i");  // U+16F61·	𖽡
  gIa = postscript("miao_ia");  // U+16F62·	𖽢
  gIan = postscript("miao_ian");  // U+16F63·	𖽣
  gIang = postscript("miao_iang");  // U+16F64·	𖽤
  gIo = postscript("miao_io");  // U+16F65·	𖽥
  gIe = postscript("miao_ie");  // U+16F66·	𖽦
  gIi = postscript("miao_ii");  // U+16F67·	𖽧
  gIu = postscript("miao_iu");  // U+16F68·	𖽨
  gIng = postscript("miao_ing");  // U+16F69·	𖽩
  gU = postscript("miao_u");  // U+16F6A·	𖽪
  gUa = postscript("miao_ua");  // U+16F6B·	𖽫
  gUan = postscript("miao_uan");  // U+16F6C·	𖽬
  gUang = postscript("miao_uang");  // U+16F6D·	𖽭
  gUu = postscript("miao_uu");  // U+16F6E·	𖽮
  gUei = postscript("miao_uei");  // U+16F6F·	𖽯
  gUng = postscript("miao_ung");  // U+16F70·	𖽰
  gY = postscript("miao_y");  // U+16F71·	𖽱
  gYi = postscript("miao_yi");  // U+16F72·	𖽲
  gAe = postscript("miao_ae");  // U+16F73·	𖽳
  gAee = postscript("miao_aee");  // U+16F74·	𖽴
  gErr = postscript("miao_err");  // U+16F75·	𖽵
  gErrRnd = postscript("miao_round_err");  // U+16F76·	𖽶
  gEr = postscript("miao_er");  // U+16F77·	𖽷
  gErRnd = postscript("miao_round_er");  // U+16F78·	𖽸
  gAi = postscript("miao_ai");  // U+16F79·	𖽹
  gEi = postscript("miao_ei");  // U+16F7A·	𖽺
  gAu = postscript("miao_au");  // U+16F7B·	𖽻
  gOu = postscript("miao_ou");  // U+16F7C·	𖽼
  gN = postscript("miao_n");  // U+16F7D·	𖽽
  gNg = postscript("miao_ng");  // U+16F7E·	𖽾
  gUog = postscript("miao_uog");  // U+16F7F·	𖽿
  gYui = postscript("miao_yui");  // U+16F80·	𖾀

/* finals compressed on y-axis for above and below positions */
  gAYcmp = postscript("miao_a.ycmp");  // U+16F54 compressed·	𖽔
  gAaYcmp = postscript("miao_aa.ycmp");  // U+16F55 compressed·	𖽕
  gAhhYcmp = postscript("miao_ahh.ycmp");  // U+16F56 compressed·	𖽖
  gAnYcmp = postscript("miao_an.ycmp");  // U+16F57 compressed·	𖽗
  gAngYcmp = postscript("miao_ang.ycmp");  // U+16F58 compressed·	𖽘
  gOYcmp = postscript("miao_o.ycmp");  // U+16F59 compressed·	𖽙
  gOoYcmp = postscript("miao_oo.ycmp");  // U+16F5A compressed·	𖽚
  gWoYcmp = postscript("miao_wo.ycmp");  // U+16F5B compressed·	𖽛
  gWYcmp = postscript("miao_w.ycmp");  // U+16F5C compressed·	𖽜
  gEYcmp = postscript("miao_e.ycmp");  // U+16F5D compressed·	𖽝
  gEnYcmp = postscript("miao_en.ycmp");  // U+16F5E compressed·	𖽞
  gEngYcmp = postscript("miao_eng.ycmp");  // U+16F5F compressed·	𖽟
  gOeyYcmp = postscript("miao_oey.ycmp");  // U+16F60 compressed·	𖽠
  gIYcmp = postscript("miao_i.ycmp");  // U+16F61 compressed·	𖽡
  gIaYcmp = postscript("miao_ia.ycmp");  // U+16F62 compressed·	𖽢
  gIanYcmp = postscript("miao_ian.ycmp");  // U+16F63 compressed·	𖽣
  gIangYcmp = postscript("miao_iang.ycmp");  // U+16F64 compressed·	𖽤
  gIoYcmp = postscript("miao_io.ycmp");  // U+16F65 compressed·	𖽥
  gIeYcmp = postscript("miao_ie.ycmp");  // U+16F66 compressed·	𖽦
  gIiYcmp = postscript("miao_ii.ycmp");  // U+16F67 compressed·	𖽧
  gIuYcmp = postscript("miao_iu.ycmp");  // U+16F68 compressed·	𖽨
  gIngYcmp = postscript("miao_ing.ycmp");  // U+16F69 compressed·	𖽩
  gUYcmp = postscript("miao_u.ycmp");  // U+16F6A compressed·	𖽪
  gUaYcmp = postscript("miao_ua.ycmp");  // U+16F6B compressed·	𖽫
  gUanYcmp = postscript("miao_uan.ycmp");  // U+16F6C compressed·	𖽬
  gUangYcmp = postscript("miao_uang.ycmp");  // U+16F6D compressed·	𖽭
  gUuYcmp = postscript("miao_uu.ycmp");  // U+16F6E compressed·	𖽮
  gUeiYcmp = postscript("miao_uei.ycmp");  // U+16F6F compressed·	𖽯
  gUngYcmp = postscript("miao_ung.ycmp");  // U+16F70 compressed·	𖽰
  gYYcmp = postscript("miao_y.ycmp");  // U+16F71 compressed·	𖽱
  gYiYcmp = postscript("miao_yi.ycmp");  // U+16F72 compressed·	𖽲
  gAeYcmp = postscript("miao_ae.ycmp");  // U+16F73 compressed·	𖽳
  gAeeYcmp = postscript("miao_aee.ycmp");  // U+16F74 compressed·	𖽴
  gErrYcmp = postscript("miao_err.ycmp");  // U+16F75 compressed·	𖽵
  gErrRndYcmp = postscript("miao_round_err.ycmp");  // U+16F76 compressed·	𖽶
  gErYcmp = postscript("miao_er.ycmp");  // U+16F77 compressed·	𖽷
  gErRndYcmp = postscript("miao_round_er.ycmp");  // U+16F78 compressed·	𖽸
  gAiYcmp = postscript("miao_ai.ycmp");  // U+16F79 compressed·	𖽹
  gEiYcmp = postscript("miao_ei.ycmp");  // U+16F7A compressed·	𖽺
  gAuYcmp = postscript("miao_au.ycmp");  // U+16F7B compressed·	𖽻
  gOuYcmp = postscript("miao_ou.ycmp");  // U+16F7C compressed·	𖽼
  gNYcmp = postscript("miao_n.ycmp");  // U+16F7D compressed·	𖽽
  gNgYcmp = postscript("miao_ng.ycmp");  // U+16F7E compressed·	𖽾
  gUogYcmp = postscript("miao_uog");  // U+16F7F·	𖽿
  gYuiYcmp = postscript("miao_yui");  // U+16F80·	𖾀

  clsFina = (gA, gAa, gAhh, gAn, gAng,
             gO, gOo, gWo, gW,
             gE, gEn, gEng, gOey,
             gI, gIa, gIan, gIang, gIo,
             gIe, gIi, gIu, gIng,
             gU, gUa, gUan, gUang,
             gUu, gUei, gUng,
             gY, gYi, gAe, gAee,
             gErr, gErrRnd, gEr, gErRnd,
             gAi, gEi, gAu, gOu,
             gN, gNg, gUog, gYui);

  clsFinaYcmp = (gAYcmp, gAaYcmp, gAhhYcmp, gAnYcmp, gAngYcmp,
                 gOYcmp, gOoYcmp, gWoYcmp, gWYcmp,
                 gEYcmp, gEnYcmp, gEngYcmp, gOeyYcmp,
                 gIYcmp, gIaYcmp, gIanYcmp, gIangYcmp, gIoYcmp,
                 gIeYcmp, gIiYcmp, gIuYcmp, gIngYcmp,
                 gUYcmp, gUaYcmp, gUanYcmp, gUangYcmp,
                 gUuYcmp, gUeiYcmp, gUngYcmp,
                 gYYcmp, gYiYcmp, gAeYcmp, gAeeYcmp,
                 gErrYcmp, gErrRndYcmp, gErYcmp, gErRndYcmp,
                 gAiYcmp, gEiYcmp, gAuYcmp, gOuYcmp,
                 gNYcmp, gNgYcmp, gUogYcmp, gYuiYcmp);

/* necessary for correct shifting height to have a class excluding "a" (U+16F54) but clsFina can't be composed of gA and clsFinaStdYShift as it needs to correspond exactly to clsFinaYcmp */
  clsFinaStdYShift = (gAa, gAhh, gAn, gAng,
             gO, gOo, gWo, gW,
             gE, gEn, gEng, gOey,
             gI, gIa, gIan, gIang, gIo,
             gIe, gIi, gIu, gIng,
             gU, gUa, gUan, gUang,
             gUu, gUei, gUng,
             gY, gYi, gAe, gAee,
             gErr, gErrRnd, gEr, gErRnd,
             gAi, gEi, gAu, gOu,
             gN, gNg, gUog, gYui);

/* y-compressed finals break-down: "norm" height 200m or 230m, bottom join; "top" height 230m, top join; "desc" height 278m, top join */
  clsFinaYcmpNorm = (gAYcmp, gAaYcmp, gAhhYcmp, gAnYcmp, gAngYcmp,
                     gOYcmp, gOoYcmp, gWoYcmp, gWYcmp,
                     gEYcmp, gEnYcmp, gEngYcmp, gOeyYcmp,
                     gIYcmp, gIaYcmp,/*gIanYcmp, gIangYcmp,*/gIoYcmp,
                     gIeYcmp, gIiYcmp,/*gIuYcmp, gIngYcmp,*/
                     gUYcmp, gUaYcmp, gUanYcmp, gUangYcmp,
                     gUuYcmp, gUeiYcmp, gUngYcmp,
                     gYYcmp, gYiYcmp, gAeYcmp, gAeeYcmp,
                     gErrYcmp, gErrRndYcmp, gErYcmp, gErRndYcmp,
                     gAiYcmp, gEiYcmp, gAuYcmp, gOuYcmp,
                     gNYcmp, gNgYcmp, gUogYcmp, gYuiYcmp)
    { NormM = point(bb.width/2, bb.bottom) ;
      NormL = point(bb.right+30m, bb.bottom) ;
      NormR = point(bb.left-30m, bb.bottom) ;
      NormTopL = point(bb.right+30m, bb.top) ;
      NormTopR = point(bb.left-30m, bb.top) } ;

  clsFinaYcmpTop = (gIuYcmp, gIngYcmp)
    { TopM = point(bb.width/2, bb.top) ;
      TopL = point(bb.right+30m, bb.top) ;
      TopR = point(bb.left-30m, bb.top) } ;

  clsFinaYcmpDesc = (gIanYcmp, gIangYcmp)
    { DescM = point(bb.width/2, bb.top) ;
      DescL = point(bb.right-10m, bb.top) ;
      DescR = point(bb.left-10m, bb.top) } ;

/* tone positions */
  gRightMark = postscript("miao_tone_right");  // U+16F8F·	𖾏
  gTopRightMark = postscript("miao_tone_top_right");  // U+16F90·	𖾐
  gAboveMark = postscript("miao_tone_above");  // U+16F91·	𖾑
  gBelowMark = postscript("miao_tone_below");  // U+16F92·	𖾒

  gRight = postscript("miao_tone_right.blnk");  // U+16F8F blank·	𖾏
  gTopRight = postscript("miao_tone_top_right.blnk");  // U+16F90 blank·	𖾐
  gAbove = postscript("miao_tone_above.blnk");  // U+16F91 blank·	𖾑
  gBelow = postscript("miao_tone_below.blnk");  // U+16F92 blank·	𖾒

  clsPosMark = (gRightMark, gTopRightMark, gAboveMark, gBelowMark);
  clsPos     = (gRight, gTopRight, gAbove, gBelow);

/* tone letters */
/* Chuxiong Orthography*/
  gTone2 = postscript("miao_tone2");  // U+16F93·𖾓
  gTone3 = postscript("miao_tone3");  // U+16F94·𖾔
  gTone4 = postscript("miao_tone4");  // U+16F95·𖾕
  gTone5 = postscript("miao_tone5");  // U+16F96·𖾖
  gTone6 = postscript("miao_tone6");  // U+16F97·𖾗
  gTone7 = postscript("miao_tone7");  // U+16F98·𖾘
  gTone8 = postscript("miao_tone8");  // U+16F99·𖾙
/* Post-1949 Reform */
  gTone1Ref = postscript("miao_ref_tone1");  // U+16F9A·𖾚
  gTone2Ref = postscript("miao_ref_tone2");  // U+16F9B·𖾛
  gTone4Ref = postscript("miao_ref_tone4");  // U+16F9C·𖾜
  gTone5Ref = postscript("miao_ref_tone5");  // U+16F9D·𖾝
  gTone6Ref = postscript("miao_ref_tone6");  // U+16F9E·𖾞
  gTone8Ref = postscript("miao_ref_tone8");  // U+16F9F·𖾟

  clsTone = (gTone2, gTone3, gTone4, gTone5,
             gTone6, gTone7, gTone8,
             gTone1Ref, gTone2Ref, gTone4Ref,
             gTone5Ref, gTone6Ref, gTone8Ref);

/* shared punctuation here just in case */
  gSpace = U+0020;
  clsPnct = (gSpace, (U+0021..U+002F), (U+003A..U+003F));


/* classes for stylistic sets with Latin & Lisu glyphs, irrelevant for Miao */

/* Lisu (Fraser) Unicode range */
/* consonants */
  gLisuBa = postscript("lisu_ba");  // U+A4D0·ꓐ
  gLisuPa = postscript("lisu_pa");  // U+A4D1·ꓑ
  gLisuPha = postscript("lisu_pha");  // U+A4D2·ꓒ
  gLisuDa = postscript("lisu_da");  // U+A4D3·ꓓ
  gLisuTa = postscript("lisu_ta");  // U+A4D4·ꓔ
  gLisuTha = postscript("lisu_tha");  // U+A4D5·ꓕ
  gLisuGa = postscript("lisu_ga");  // U+A4D6·ꓖ
  gLisuKa = postscript("lisu_ka");  // U+A4D7·ꓗ
  gLisuKha = postscript("lisu_kha");  // U+A4D8·ꓘ
  gLisuJa = postscript("lisu_ja");  // U+A4D9·ꓙ
  gLisuCa = postscript("lisu_ca");  // U+A4DA·ꓚ
  gLisuCha = postscript("lisu_cha");  // U+A4DB·ꓛ
  gLisuDza = postscript("lisu_dza");  // U+A4DC·ꓜ
  gLisuTsa = postscript("lisu_tsa");  // U+A4DD·ꓝ
  gLisuTsha = postscript("lisu_tsha");  // U+A4DE·ꓞ
  gLisuMa = postscript("lisu_ma");  // U+A4DF·ꓟ
  gLisuNa = postscript("lisu_na");  // U+A4E0·ꓠ
  gLisuLa = postscript("lisu_la");  // U+A4E1·ꓡ
  gLisuSa = postscript("lisu_sa");  // U+A4E2·ꓢ
  gLisuZha = postscript("lisu_zha");  // U+A4E3·ꓣ
  gLisuZa = postscript("lisu_za");  // U+A4E4·ꓤ
  gLisuNga = postscript("lisu_nga");  // U+A4E5·ꓥ
  gLisuHa = postscript("lisu_ha");  // U+A4E6·ꓦ
  gLisuXa = postscript("lisu_xa");  // U+A4E7·ꓧ
  gLisuHha = postscript("lisu_hha");  // U+A4E8·ꓨ
  gLisuFa = postscript("lisu_fa");  // U+A4E9·ꓩ
  gLisuWa = postscript("lisu_wa");  // U+A4EA·ꓪ
  gLisuSha = postscript("lisu_sha");  // U+A4EB·ꓫ
  gLisuYa = postscript("lisu_ya");  // U+A4EC·ꓬ
  gLisuGha = postscript("lisu_gha");  // U+A4ED·ꓭ

/* vowels*/
  gLisuA = postscript("lisu_a");  // U+A4EE·ꓮ
  gLisuAe = postscript("lisu_ae");  // U+A4EF·ꓯ
  gLisuE = postscript("lisu_e");  // U+A4F0·ꓰ
  gLisuEu = postscript("lisu_eu");  // U+A4F1·ꓱ
  gLisuI = postscript("lisu_i");  // U+A4F2·ꓲ
  gLisuO = postscript("lisu_o");  // U+A4F3·ꓳ
  gLisuU = postscript("lisu_u");  // U+A4F4·ꓴ
  gLisuUe = postscript("lisu_ue");  // U+A4F5·ꓵ
  gLisuUh = postscript("lisu_uh");  // U+A4F6·ꓶ
  gLisuOe = postscript("lisu_oe");  // U+A4F7·ꓷ

/* tones */
  gLisuToneMyaTi = postscript("lisu_tone_mya_ti");  // U+A4F8·ꓸ
  gLisuToneNaPo = postscript("lisu_tone_na_po");  // U+A4F9·ꓹ
  gLisuToneMyaCya = postscript("lisu_tone_mya_cya");  // U+A4FA·ꓺ
  gLisuToneMyaBo = postscript("lisu_tone_mya_bo");  // U+A4FB·ꓻ
  gLisuToneMyaNa = postscript("lisu_tone_mya_na");  // U+A4FC·ꓼ
  gLisuToneMyaJeu = postscript("lisu_tone_mya_jeu");  // U+A4FD·ꓽ

/* punctuation*/
  gLisuComma = postscript("lisu_comma");  // U+A4FE·꓾
  gLisuFullStop = postscript("lisu_full_stop");  // U+A4FF·꓿

/* Lisu (Fraser) letters as small capitals */
/* consonants (small caps) */
  gLisuBaSmcp = postscript("lisu_ba.sc");  // U+A4D0·ꓐ
  gLisuPaSmcp = postscript("lisu_pa.sc");  // U+A4D1·ꓑ
  gLisuPhaSmcp = postscript("lisu_pha.sc");  // U+A4D2·ꓒ
  gLisuDaSmcp = postscript("lisu_da.sc");  // U+A4D3·ꓓ
  gLisuTaSmcp = postscript("lisu_ta.sc");  // U+A4D4·ꓔ
  gLisuThaSmcp = postscript("lisu_tha.sc");  // U+A4D5·ꓕ
  gLisuGaSmcp = postscript("lisu_ga.sc");  // U+A4D6·ꓖ
  gLisuKaSmcp = postscript("lisu_ka.sc");  // U+A4D7·ꓗ
  gLisuKhaSmcp = postscript("lisu_kha.sc");  // U+A4D8·ꓘ
  gLisuJaSmcp = postscript("lisu_ja.sc");  // U+A4D9·ꓙ
  gLisuCaSmcp = postscript("lisu_ca.sc");  // U+A4DA·ꓚ
  gLisuChaSmcp = postscript("lisu_cha.sc");  // U+A4DB·ꓛ
  gLisuDzaSmcp = postscript("lisu_dza.sc");  // U+A4DC·ꓜ
  gLisuTsaSmcp = postscript("lisu_tsa.sc");  // U+A4DD·ꓝ
  gLisuTshaSmcp = postscript("lisu_tsha.sc");  // U+A4DE·ꓞ
  gLisuMaSmcp = postscript("lisu_ma.sc");  // U+A4DF·ꓟ
  gLisuNaSmcp = postscript("lisu_na.sc");  // U+A4E0·ꓠ
  gLisuLaSmcp = postscript("lisu_la.sc");  // U+A4E1·ꓡ
  gLisuSaSmcp = postscript("lisu_sa.sc");  // U+A4E2·ꓢ
  gLisuZhaSmcp = postscript("lisu_zha.sc");  // U+A4E3·ꓣ
  gLisuZaSmcp = postscript("lisu_za.sc");  // U+A4E4·ꓤ
  gLisuNgaSmcp = postscript("lisu_nga.sc");  // U+A4E5·ꓥ
  gLisuHaSmcp = postscript("lisu_ha.sc");  // U+A4E6·ꓦ
  gLisuXaSmcp = postscript("lisu_xa.sc");  // U+A4E7·ꓧ
  gLisuHhaSmcp = postscript("lisu_hha.sc");  // U+A4E8·ꓨ
  gLisuFaSmcp = postscript("lisu_fa.sc");  // U+A4E9·ꓩ
  gLisuWaSmcp = postscript("lisu_wa.sc");  // U+A4EA·ꓪ
  gLisuShaSmcp = postscript("lisu_sha.sc");  // U+A4EB·ꓫ
  gLisuYaSmcp = postscript("lisu_ya.sc");  // U+A4EC·ꓬ
  gLisuGhaSmcp = postscript("lisu_gha.sc");  // U+A4ED·ꓭ

/* vowels (small caps) */
  gLisuASmcp = postscript("lisu_a.sc");  // U+A4EE·ꓮ
  gLisuAeSmcp = postscript("lisu_ae.sc");  // U+A4EF·ꓯ
  gLisuESmcp = postscript("lisu_e.sc");  // U+A4F0·ꓰ
  gLisuEuSmcp = postscript("lisu_eu.sc");  // U+A4F1·ꓱ
  gLisuISmcp = postscript("lisu_i.sc");  // U+A4F2·ꓲ
  gLisuOSmcp = postscript("lisu_o.sc");  // U+A4F3·ꓳ
  gLisuUSmcp = postscript("lisu_u.sc");  // U+A4F4·ꓴ
  gLisuUeSmcp = postscript("lisu_ue.sc");  // U+A4F5·ꓵ
  gLisuUhSmcp = postscript("lisu_uh.sc");  // U+A4F6·ꓶ
  gLisuOeSmcp = postscript("lisu_oe.sc");  // U+A4F7·ꓷ

clsLisuLetters = (
gLisuBa, gLisuPa, gLisuPha, gLisuDa, gLisuTa, gLisuTha, gLisuGa, gLisuKa, gLisuKha, gLisuJa, gLisuCa, gLisuCha, gLisuDza, gLisuTsa, gLisuTsha, gLisuMa, gLisuNa, gLisuLa, gLisuSa, gLisuZha, gLisuZa, gLisuNga, gLisuHa, gLisuXa, gLisuHha, gLisuFa, gLisuWa, gLisuSha, gLisuYa, gLisuGha, gLisuA, gLisuAe, gLisuE, gLisuEu, gLisuI, gLisuO, gLisuU, gLisuUe, gLisuUh, gLisuOe
);

clsLisuTones = (
gLisuToneMyaTi, gLisuToneNaPo, gLisuToneMyaCya, gLisuToneMyaBo, gLisuToneMyaNa, gLisuToneMyaJeu
);

clsLisuPunct = (
gLisuComma, gLisuFullStop
);

clsLisuLettersSC = (
gLisuBaSmcp, gLisuPaSmcp, gLisuPhaSmcp, gLisuDaSmcp, gLisuTaSmcp, gLisuThaSmcp, gLisuGaSmcp, gLisuKaSmcp, gLisuKhaSmcp, gLisuJaSmcp, gLisuCaSmcp, gLisuChaSmcp, gLisuDzaSmcp, gLisuTsaSmcp, gLisuTshaSmcp, gLisuMaSmcp, gLisuNaSmcp, gLisuLaSmcp, gLisuSaSmcp, gLisuZhaSmcp, gLisuZaSmcp, gLisuNgaSmcp, gLisuHaSmcp, gLisuXaSmcp, gLisuHhaSmcp, gLisuFaSmcp, gLisuWaSmcp, gLisuShaSmcp, gLisuYaSmcp, gLisuGhaSmcp, gLisuASmcp, gLisuAeSmcp, gLisuESmcp, gLisuEuSmcp, gLisuISmcp, gLisuOSmcp, gLisuUSmcp, gLisuUeSmcp, gLisuUhSmcp, gLisuOeSmcp
);

clsLisu = (clsLisuLetters, clsLisuTones, clsLisuPunct, clsLisuLettersSC);

  clsLower = postscript("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "agrave", "aacute", "acircumflex","atilde", "adieresis", "amacron","abreve", "aring", "uni01CE", "uni1EA1","uni1EA3", "uni1EA5", "uni1EA7", "uni1EA9","uni1EAB", "uni1EAD", "uni1EAF", "uni1EB1","uni1EB3", "uni1EB5", "uni1EB7", "aogonek","ae", "uni0180", "uni1E07", "ccedilla","cacute", "ccircumflex", "ccaron","cdotaccent", "dcaron", "uni1E0D", "uni1E0F","dcroat", "egrave", "eacute", "ecircumflex","ecaron", "edieresis", "emacron","ebreve", "edotaccent", "uni1EB9", "uni1EBB", "uni1EBD", "uni1EBF", "uni1EC1", "uni1EC3","uni1EC5", "uni1EC7", "eogonek", "uni1E17","gcircumflex", "gbreve", "gdotaccent","uni0123", "gcaron", "uni1E21","uni00670303", "hcircumflex", "uni1E25","uni1E2B", "hbar", "igrave", "iacute","icircumflex", "itilde", "idieresis", "imacron", "i.trk", "uni01D0", "uni1EC9","uni1ECB", "iogonek", "uni012D","jcircumflex", "uni0137", "uni1E35", "lacute", "lcaron", "uni013C", "ldot", "uni1E37","uni1E39", "uni1E3B", "lslash", "uni1E43","nacute", "ncaron", "ntilde", "uni0146","uni1E45", "uni1E47", "uni1E49", "ograve","oacute", "ocircumflex", "otilde", "odieresis", "omacron", "ohungarumlaut", "uni01D1","uni1ECD", "uni1ECF", "uni1ED1", "uni1ED3","uni1ED5", "uni1ED7", "uni1ED9", "oslash","oe", "ohorn", "uni1EDB", "uni1EDD","uni1EDF", "uni1EE1", "uni1EE3", "uni01EB","uni014F", "uni1E53", "racute", "rcaron","uni0157", "uni1E5B", "uni1E5D", "uni1E5F","sacute", "scircumflex", "scaron", "uni015F", "uni0218", "uni1E61", "uni1E63","germandbls", "uni1E9E", "tcaron", "uni0163", "uni021B", "uni1E6D", "uni1E6F", "ugrave","uacute", "ucircumflex", "utilde", "udieresis", "umacron", "ubreve", "uring","uhungarumlaut", "uni01D4", "uni01D6","uni01D8", "uni01DA", "uni01DC", "uni1EE5","uni1EE7", "uogonek", "uhorn", "uni1EE9","uni1EEB", "uni1EED", "uni1EEF", "uni1EF1","wgrave", "wacute", "wcircumflex","wdieresis", "ygrave", "yacute","ycircumflex", "ydieresis", "uni1E8F","uni1EF5", "uni1EF7", "uni1EF9", "zacute","zcaron", "zdotaccent", "uni1E93", "eth","thorn", "uni0259");
  clsUpper = postscript("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "Agrave", "Aacute", "Acircumflex","Atilde", "Adieresis", "Amacron","Abreve", "Aring", "uni01CD", "uni1EA0","uni1EA2", "uni1EA4", "uni1EA6", "uni1EA8","uni1EAA", "uni1EAC", "uni1EAE", "uni1EB0","uni1EB2", "uni1EB4", "uni1EB6", "Aogonek","AE", "uni0243", "uni1E06", "Ccedilla","Cacute", "Ccircumflex", "Ccaron","Cdotaccent", "Dcaron", "uni1E0C", "uni1E0E","Dcroat", "Egrave", "Eacute", "Ecircumflex","Ecaron", "Edieresis", "Emacron","Ebreve", "Edotaccent", "uni1EB8", "uni1EBA", "uni1EBC", "uni1EBE", "uni1EC0", "uni1EC2","uni1EC4", "uni1EC6", "Eogonek", "uni1E16","Gcircumflex", "Gbreve", "Gdotaccent","uni0122", "Gcaron", "uni1E20","uni00470303", "Hcircumflex", "uni1E24","uni1E2A", "Hbar", "Igrave", "Iacute","Icircumflex", "Itilde", "Idieresis", "Imacron", "Idotaccent", "uni01CF", "uni1EC8","uni1ECA", "Iogonek", "uni012C","Jcircumflex", "uni0136", "uni1E34", "Lacute", "Lcaron", "uni013B", "Ldot", "uni1E36","uni1E38", "uni1E3A", "Lslash", "uni1E42","Nacute", "Ncaron", "Ntilde", "uni0145","uni1E44", "uni1E46", "uni1E48", "Ograve","Oacute", "Ocircumflex", "Otilde", "Odieresis", "Omacron", "Ohungarumlaut", "uni01D1","uni1ECC", "uni1ECE", "uni1ED0", "uni1ED2","uni1ED4", "uni1ED6", "uni1ED8", "Oslash","OE", "Ohorn", "uni1EDA", "uni1EDC","uni1EDE", "uni1EE0", "uni1EE2", "uni01EA","uni014E", "uni1E52", "Racute", "Rcaron","uni0156", "uni1E5A", "uni1E5C", "uni1E5E","Sacute", "Scircumflex", "Scaron", "uni015E", "uni0218", "uni1E60", "uni1E62","germandbls", "uni1E9E", "Tcaron", "uni0162", "uni021A", "uni1E6C", "uni1E6E", "Ugrave","Uacute", "Ucircumflex", "Utilde", "Udieresis", "Umacron", "Ubreve", "Uring","Uhungarumlaut", "uni01D3", "uni01D5","uni01D7", "uni01D9", "uni01DB", "uni1EE4","uni1EE6", "Uogonek", "Uhorn", "uni1EE8","uni1EEA", "uni1EEC", "uni1EEE", "uni1EF0","Wgrave", "Wacute", "Wcircumflex","Wdieresis", "Ygrave", "Yacute","Ycircumflex", "Ydieresis", "uni1E8E","uni1EF4", "uni1EF6", "uni1EF8", "Zacute","Zcaron", "Zdotaccent", "uni1E92", "Eth","Thorn", "uni018F");
  clsSC = postscript("A.sc", "B.sc", "C.sc", "D.sc", "E.sc", "F.sc", "G.sc", "H.sc", "I.sc", "J.sc", "K.sc", "L.sc", "M.sc", "N.sc", "O.sc", "P.sc", "Q.sc", "R.sc", "S.sc", "T.sc", "U.sc", "V.sc", "W.sc", "X.sc", "Y.sc", "Z.sc", "Agrave.sc", "Aacute.sc", "Acircumflex.sc","Atilde.sc", "Adieresis.sc", "Amacron.sc","Abreve.sc", "Aring.sc", "uni01CD.sc", "uni1EA0.sc","uni1EA2.sc", "uni1EA4.sc", "uni1EA6.sc", "uni1EA8.sc","uni1EAA.sc", "uni1EAC.sc", "uni1EAE.sc", "uni1EB0.sc","uni1EB2.sc", "uni1EB4.sc", "uni1EB6.sc", "Aogonek.sc","AE.sc", "uni0243.sc", "uni1E06.sc", "Ccedilla.sc","Cacute.sc", "Ccircumflex.sc", "Ccaron.sc","Cdotaccent.sc", "Dcaron.sc", "uni1E0C.sc", "uni1E0E.sc","Dcroat.sc", "Egrave.sc", "Eacute.sc", "Ecircumflex.sc","Ecaron.sc", "Edieresis.sc", "Emacron.sc","Ebreve.sc", "Edotaccent.sc", "uni1EB8.sc", "uni1EBA.sc", "uni1EBC.sc", "uni1EBE.sc", "uni1EC0.sc", "uni1EC2.sc","uni1EC4.sc", "uni1EC6.sc", "Eogonek.sc", "uni1E16.sc","Gcircumflex.sc", "Gbreve.sc", "Gdotaccent.sc","uni0122.sc", "Gcaron.sc", "uni1E20.sc","uni00470303.sc", "Hcircumflex.sc", "uni1E24.sc","uni1E2A.sc", "Hbar.sc", "Igrave.sc", "Iacute.sc","Icircumflex.sc", "Itilde.sc", "Idieresis.sc", "Imacron.sc", "Idotaccent.sc", "uni01CF.sc", "uni1EC8.sc","uni1ECA.sc", "Iogonek.sc", "uni012C.sc","Jcircumflex.sc", "uni0136.sc", "uni1E34.sc", "Lacute.sc", "Lcaron.sc", "uni013B.sc", "Ldot.sc", "uni1E36.sc","uni1E38.sc", "uni1E3A.sc", "Lslash.sc", "uni1E42.sc","Nacute.sc", "Ncaron.sc", "Ntilde.sc", "uni0145.sc","uni1E44.sc", "uni1E46.sc", "uni1E48.sc", "Ograve.sc","Oacute.sc", "Ocircumflex.sc", "Otilde.sc", "Odieresis.sc", "Omacron.sc", "Ohungarumlaut.sc", "uni01D1.sc","uni1ECC.sc", "uni1ECE.sc", "uni1ED0.sc", "uni1ED2.sc","uni1ED4.sc", "uni1ED6.sc", "uni1ED8.sc", "Oslash.sc","OE.sc", "Ohorn.sc", "uni1EDA.sc", "uni1EDC.sc","uni1EDE.sc", "uni1EE0.sc", "uni1EE2.sc", "uni01EA.sc","uni014E.sc", "uni1E52.sc", "Racute.sc", "Rcaron.sc","uni0156.sc", "uni1E5A.sc", "uni1E5C.sc", "uni1E5E.sc","Sacute.sc", "Scircumflex.sc", "Scaron.sc", "uni015E.sc", "uni0218.sc", "uni1E60.sc", "uni1E62.sc","germandbls.sc", "uni1E9E.sc", "Tcaron.sc", "uni0162.sc", "uni021A.sc", "uni1E6C.sc", "uni1E6E.sc", "Ugrave.sc","Uacute.sc", "Ucircumflex.sc", "Utilde.sc", "Udieresis.sc", "Umacron.sc", "Ubreve.sc", "Uring.sc","Uhungarumlaut.sc", "uni01D3.sc", "uni01D5.sc","uni01D7.sc", "uni01D9.sc", "uni01DB.sc", "uni1EE4.sc","uni1EE6.sc", "Uogonek.sc", "Uhorn.sc", "uni1EE8.sc","uni1EEA.sc", "uni1EEC.sc", "uni1EEE.sc", "uni1EF0.sc","Wgrave.sc", "Wacute.sc", "Wcircumflex.sc","Wdieresis.sc", "Ygrave.sc", "Yacute.sc","Ycircumflex.sc", "Ydieresis.sc", "uni1E8E.sc","uni1EF4.sc", "uni1EF6.sc", "uni1EF8.sc", "Zacute.sc","Zcaron.sc", "Zdotaccent.sc", "uni1E92.sc", "Eth.sc","Thorn.sc", "uni018F.sc");

  clsLnum = postscript("zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine");
  clsOnum = postscript("zero.onum", "one.onum", "two.onum", "three.onum", "four.onum", "five.onum", "six.onum", "seven.onum", "eight.onum", "nine.onum");
  clsSCnum = postscript("zero.sc", "one.sc", "two.sc", "three.sc", "four.sc", "five.sc", "six.sc","seven.sc", "eight.sc", "nine.sc");
  clsUpperPnct = postscript ("ampersand", "hyphen", "endash","emdash");
  clsSCPnct = postscript("ampersand.sc", "hyphen.sc", "endash.sc","emdash.sc");
endtable;

table(feature)
/* Chuxiong 'wart' variant */
  chux {
    id = "chux";
    name.LG_USENG = string("Chuxiong");
  }
/* misc stylistic alternates */
  salt {
    id = "salt";
    name.LG_USENG = string("Stylistic alternates");
  }
/* aspiration marker always on the right */
  aspr {
    id = "aspr";
    name.LG_USENG = string("Aspiration always on right");
  }

/* features for Latin; irrelevant for Miao*/
  smcp {
    id = "smcp";
    name.LG_USENG = string("Small caps");
  }
  c2sc {
    id = "c2sc";
    name.LG_USENG = string("Caps to small caps");
  }
  onum {
    id = "onum";
    name.LG_USENG = string("Oldstyle figures");
  }
endtable;

table(sub)
 pass(1)
  _ clsInit clsAsp gNasal > gNasal:4 @2 @3 _ ; // reorder nasalization marker to come before syllable initial if there is an intervening aspiration mark (technically a typing error but rule included just in case)
  clsPosMark > clsPos / clsFina _ ; // turn position marker into its corresponding zero-width blank glyph when after a final

/* salt and chux features for Miao */
  if (chux)
    clsWartStd > clsWartChux ;
  endif;
  if (salt)
    clsInitSaltStd > clsInitSalt ;
  endif;

/* features for Latin, irrelevant for Miao */
  if (smcp)
    clsLower > clsSC ;
    clsLisuLetters > clsLisuLettersSC ;
  endif;
  if (c2sc)
    clsUpper > clsSC ;
    clsLisuLetters > clsLisuLettersSC ;
    clsLnum > clsSCnum ;
    clsUpperPnct > clsSCPnct ;
  endif;
  if (onum)
    clsLnum > clsOnum ;
  endif;
 endpass;

 pass(2)
  clsInit gNasal > @2 @1 ; // reorder nasalization marker to come before syllable initial (for correct typing order; ignores output of the corresponding "typo" rule in pass(1))
  clsFina > clsFinaYcmp / _ [clsFina? clsFina]? gAbove ; // turn final into corresponding y-axis compressed glyph when about to be positioned above initial
  clsFina > clsFinaYcmp / _ [clsFina? clsFina]? gBelow ; // turn final into corresponding y-axis compressed glyph when about to be positioned below initial
 endpass;
endtable;

table(pos) { MUnits = 1000 }
 pass(1)
/* attach aspiration mark to initial; doesn't require context section as nasal marker is reordered before this */
  clsInit clsAspHi {attach {to=@1; at=aspHiS; with=aspHiM; 
    level = 1}} ; // doesn't apply to AspL nasal initials as clsAspHi no longer there
  clsInit clsAspLo {attach {to=@1; at=aspLoS; with=aspLoM; 
    level = 1}} ;
 endpass; // pass1 — aspiration/voicing marks

 pass(2)
/* only operates if there are two finals together moving TONE ABOVE position */
  clsInit clsFinaYcmpDesc {attach {to=@1; at=aboveDescS; with=DescL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpDesc gAbove ;
  clsFinaYcmpDesc clsFinaYcmpDesc {attach {to=@1; at=DescL; with=DescR; level = 3}}
    /  _ ^ _ gAbove ; // two "descender" finals together, above

  clsInit clsFinaYcmpTop {attach {to=@1; at=aboveTopS; with=TopL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpTop gAbove ;
  clsFinaYcmpTop clsFinaYcmpTop {attach {to=@1; at=TopL; with=TopR; level = 3}}
    /  _ ^ _ gAbove ; // two "top" finals together, above

  clsInit clsFinaYcmpNorm {attach {to=@1; at=aboveNormS; with=NormL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpNorm gAbove ;
  clsFinaYcmpNorm clsFinaYcmpNorm {attach {to=@1; at=NormL; with=NormR; level = 3}}
    /  _ ^ _ gAbove ; // two "norm" finals together, above

  clsInit clsFinaYcmpDesc {attach {to=@1; at=aboveDescS; with=DescL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpTop gAbove ;
  clsFinaYcmpDesc clsFinaYcmpTop {attach {to=@1; at=DescL; with=TopR; level = 3}}
    /  _ ^ _ gAbove ; // a "descender" with a "top", above

  clsInit clsFinaYcmpTop {attach {to=@1; at=aboveDescS; with=TopL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpDesc gAbove ;
  clsFinaYcmpTop clsFinaYcmpDesc {attach {to=@1; at=TopL; with=DescR; level = 3}}
    /  _ ^ _ gAbove ; // a "top" with a "descender", above

  clsInit clsFinaYcmpDesc {attach {to=@1; at=aboveDescS; with=DescL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpNorm gAbove ;
  clsFinaYcmpDesc clsFinaYcmpNorm {attach {to=@1; at=DescL; with=NormTopR; level = 3}}
    /  _ ^ _ gAbove ; // a "descender" with a "norm", above

  clsInit clsFinaYcmpNorm {attach {to=@1; at=aboveDescS; with=NormTopL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpDesc gAbove ;
  clsFinaYcmpNorm clsFinaYcmpDesc {attach {to=@1; at=NormTopL; with=DescR; level = 3}}
    /  _ ^ _ gAbove ; // a "norm" with a "descender", above

  clsInit clsFinaYcmpTop {attach {to=@1; at=aboveTopS; with=TopL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpNorm gAbove ;
  clsFinaYcmpTop clsFinaYcmpNorm {attach {to=@1; at=TopL; with=NormTopR; level = 3}}
    /  _ ^ _ gAbove ; // a "top" with a "norm", above

  clsInit clsFinaYcmpNorm {attach {to=@1; at=aboveTopS; with=NormTopL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpTop gAbove ;
  clsFinaYcmpNorm clsFinaYcmpTop {attach {to=@1; at=NormTopL; with=TopR; level = 3}}
    /  _ ^ _ gAbove ; // a "norm" with a "top", above

/* only operates if there are two finals together moving TONE BELOW position */

  clsInit clsFinaYcmpDesc {attach {to=@1; at=belowDescS; with=DescL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpDesc gBelow ;
  clsFinaYcmpDesc clsFinaYcmpDesc {attach {to=@1; at=DescL; with=DescR; level = 3}}
    /  _ ^ _ gBelow ; // two "descender" finals together, below

  clsInit clsFinaYcmpTop {attach {to=@1; at=belowTopS; with=TopL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpTop gBelow ;
  clsFinaYcmpTop clsFinaYcmpTop {attach {to=@1; at=TopL; with=TopR; level = 3}}
    /  _ ^ _ gBelow ; // two "top" finals together, below

  clsInit clsFinaYcmpNorm {attach {to=@1; at=belowNormS; with=NormL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpNorm gBelow ;
  clsFinaYcmpNorm clsFinaYcmpNorm {attach {to=@1; at=NormL; with=NormR; level = 3}}
    /  _ ^ _ gBelow ; // two "norm" finals together, below

  clsInit clsFinaYcmpDesc {attach {to=@1; at=belowDescS; with=DescL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpTop gBelow ;
  clsFinaYcmpDesc clsFinaYcmpTop {attach {to=@1; at=DescL; with=TopR; level = 3}}
    /  _ ^ _ gBelow ; // a "descender" with a "top", below

  clsInit clsFinaYcmpTop {attach {to=@1; at=belowDescS; with=TopL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpDesc gBelow ;
  clsFinaYcmpTop clsFinaYcmpDesc {attach {to=@1; at=TopL; with=DescR; level = 3}}
    /  _ ^ _ gBelow ; // a "top" with a "descender", below

  clsInit clsFinaYcmpDesc {attach {to=@1; at=belowDescS; with=DescL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpNorm gBelow ;
  clsFinaYcmpDesc clsFinaYcmpNorm {attach {to=@1; at=DescL; with=NormTopR; level = 3}}
    /  _ ^ _ gBelow ; // a "descender" with a "norm", below

  clsInit clsFinaYcmpNorm {attach {to=@1; at=belowDescS; with=NormTopL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpDesc gBelow ;
  clsFinaYcmpNorm clsFinaYcmpDesc {attach {to=@1; at=NormTopL; with=DescR; level = 3}}
    /  _ ^ _ gBelow ; // a "norm" with a "descender", below

  clsInit clsFinaYcmpTop {attach {to=@1; at=belowTopS; with=TopL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpNorm gBelow ;
  clsFinaYcmpTop clsFinaYcmpNorm {attach {to=@1; at=TopL; with=NormTopR; level = 3}}
    /  _ ^ _ gBelow ; // a "top" with a "norm", below

  clsInit clsFinaYcmpNorm {attach {to=@1; at=belowTopS; with=NormTopL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpTop gBelow ;
  clsFinaYcmpNorm clsFinaYcmpTop {attach {to=@1; at=NormTopL; with=TopR; level = 3}}
    /  _ ^ _ gBelow ; // a "norm" with a "top", below

/* place final above initial if it is alone*/
  clsInit clsFinaYcmpNorm {attach {to=@1; at=aboveNormS; with=NormM; level = 2}}
    /  _ clsAsp? _ gAbove ;
  clsInit clsFinaYcmpTop {attach {to=@1; at=aboveTopS; with=TopM; level = 2}}
    /  _ clsAsp? _ gAbove ;
  clsInit clsFinaYcmpDesc {attach {to=@1; at=aboveDescS; with=DescM; level = 2}}
    /  _ clsAsp? _ gAbove ;

/* place final below initial if it is alone */
  clsInit clsFinaYcmpNorm {attach {to=@1; at=belowNormS; with=NormM; level = 2}}
    /  _ clsAsp? _ gBelow ;
  clsInit clsFinaYcmpTop {attach {to=@1; at=belowTopS; with=TopM; level = 2}}
    /  _ clsAsp? _ gBelow ;
  clsInit clsFinaYcmpDesc {attach {to=@1; at=belowDescS; with=DescM; level = 2}}
    /  _ clsAsp? _ gBelow ;

/* kern right finals (without aspiration mark) */
  clsFina {kern.x =    0m} / clsInitMidNoKern  _ OPT_FINA_SEQ gRight;
  clsFina {kern.x =  -80m} / clsInitMidMinKern _ OPT_FINA_SEQ gRight;
  clsFina {kern.x = -130m} / clsInitMidMajKern _ OPT_FINA_SEQ gRight;
  clsFina {kern.x =  -40m} / clsAsp _ OPT_FINA_SEQ gRight;

/* kern topright finals with respect to Lo initial kerning class for combinations like V,° (values inverted) */
  clsFina {kern.x = -90m} / clsInitLoMinKern  clsAspLo _ OPT_FINA_SEQ gTopRight;
  clsFina {kern.x = -60m} / clsInitLoMajKern  clsAspLo _ OPT_FINA_SEQ gTopRight;
  clsFina {kern.x =  40m} / clsInitLoChuxKern clsAspLo _ OPT_FINA_SEQ gTopRight;

/* kern topright finals with respect to Hi initial kerning class */
  clsFina {kern.x =    0m} / clsInitHiNoKern  _ OPT_FINA_SEQ gTopRight;
  clsFina {kern.x =  -90m} / clsInitHiMinKern _ OPT_FINA_SEQ gTopRight;
  clsFina {kern.x = -160m} / clsInitHiMajKern _ OPT_FINA_SEQ gTopRight;
  clsFina {kern.x =   10m} / clsAspHi _ OPT_FINA_SEQ gTopRight;
  clsFina {kern.x = -190m} / clsInitHiNoKern  clsAspLo _ OPT_FINA_SEQ gTopRight;
  clsFina {kern.x = -240m} / clsInitHiMinKern clsAspLo _ OPT_FINA_SEQ gTopRight;
  clsFina {kern.x = -340m} / clsInitHiMajKern clsAspLo _ OPT_FINA_SEQ gTopRight;

/* kern baseline finals with respect to Hi initial kerning class for combinations like A'o (values inverted) */
  clsFina {kern.x =  -90m} / clsInitHiMinKern clsAspHi _ ;
  clsFina {kern.x =  -20m} / clsInitHiMajKern clsAspHi _ ;

/* kern baseline finals with respect to Lo initial kerning class */
  clsFina {kern.x =  -60m} / clsInitLoMinKern _ ;
  clsFina {kern.x = -160m} / clsInitLoMajKern _ ;
  clsFina {kern.x = -320m} / clsInitLoChuxKern _ ;
  clsFina {kern.x = -190m} / clsInitLoNoKern  clsAspHi _ ;
  clsFina {kern.x = -220m} / clsInitLoMinKern clsAspHi _ ;
  clsFina {kern.x = -300m} / clsInitLoMajKern clsAspHi _ ;
  clsFina {kern.x = -480m} / clsInitLoChuxKern clsAspHi _ ;
 endpass; //pass2

 pass(3)
/* needs to be a separate pass, otherwise the finals will only either shift or kern, but not both */
/* shift final(s) up to "tone right" position (219m, 1/3 of cap height) */
  clsFinaStdYShift {shift.y = 219m} / _ OPT_FINA_SEQ gRight ;
/* shift final(s) up to "tone top right" position (438m, 2/3 of cap height) */
  clsFinaStdYShift {shift.y = 438m} / _ OPT_FINA_SEQ gTopRight ;
/* shift the "a" final up an extra notch for right and topright */
  gA {shift.y = 219m+80m}  / _ OPT_FINA_SEQ gRight ;
  gA {shift.y = 438m+160m} / _ OPT_FINA_SEQ gTopRight ;
 endpass; // pass3
endtable; // positioning table










